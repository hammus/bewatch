"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const events_1 = require("events");
const globby_1 = require("globby");
const callsite_1 = __importDefault(require("callsite"));
const os_1 = require("os");
const colours_ts_1 = require("colours-ts");
if (!Array.prototype.unique) {
    Array.prototype.unique = function () {
        return this.filter((value, index) => {
            return this.indexOf(value) === index;
        });
    };
}
class Bewatch extends events_1.EventEmitter {
    /**
     * File Watching using NodeJS fs.watch
     * @param globPattern The glob or array of globs to match against
     * @param watchOptions Options object
     */
    constructor(globPattern, watchOptions = {}) {
        super();
        this.options = { lockDuration: 1000, absolute: true, encoding: "utf-8", persistent: true, recursive: true, verbose: false };
        this.watchers = [];
        this.locked = false;
        this.locks = [];
        this.options = { ...this.options, ...watchOptions };
        // Callsite Gets the directory of the file this constructor was called from so we can glob from there instead of here
        this.options.cwd = (typeof this.options.cwd === "undefined") ? path.dirname(callsite_1.default()[1].getFileName()) : this.options.cwd;
        this.log("Working Directory", this.options.cwd);
        this.log("Options", this.options);
        this.files = this.globFiles(globPattern).map((g) => path.normalize(g));
        this.directories = this.files.map((f) => path.dirname(f)).unique();
    }
    log(...logargs) {
        if (this.options.verbose) {
            // tslint:disable-next-line:no-console
            console.log(`${colours_ts_1.Colours(`Bewatch::${callsite_1.default()[1].getFunctionName()}`, "cyan")}`, ...logargs, os_1.EOL);
        }
    }
    globFiles(globPattern) {
        return globby_1.sync(globPattern, this.options);
    }
    isDirectory(source) {
        return fs.lstatSync(source).isDirectory();
    }
    isFile(source) {
        return !fs.lstatSync(source).isDirectory();
    }
    getDirectories(source) {
        return fs.readdirSync(source).map((name) => path.normalize(path.join(source, name))).filter(this.isDirectory);
    }
    getFiles(dir) {
        return fs.readdirSync(dir).map((name) => path.normalize(path.join(dir, name))).filter(this.isFile);
    }
    onFileEvent(e, f) {
        if (this.locked || e !== "change") {
            return;
        }
        this.lock();
        this.log(`${colours_ts_1.Colours("Node.js FSEvent:", "yellow")} ${e} ${colours_ts_1.Colours("Node FSEvent File:", "yellow")} ${f}`);
        this.emit("all", "change", f);
        this.emit("change", f);
    }
    /**
     * fs.watch event handler for directories
     * We watch directories for add, rename delete events so we can add and remove new listeners as necessary
     *
     * @param e {string} event type
     * @param f {string} file
     * @param dir {string} the directory
     */
    onDirectoryEvent(e, f, dir) {
        if (this.locked || e !== "rename") {
            return;
        }
        this.lock();
        this.log(`${colours_ts_1.Colours("Raw FSEvent:", "yellow")} ${e}${os_1.EOL}${colours_ts_1.Colours("Raw FSEvent File:", "yellow")} ${f}${os_1.EOL}${colours_ts_1.Colours("Directory:", "yellow")} ${dir}${os_1.EOL}`);
        const abs = path.join(dir, path.basename(f));
        if (!fs.existsSync(abs)) {
            const renamedFile = this.getRenamedFiles(dir);
            if (typeof renamedFile !== "undefined") {
                this.log(`Old File: ${abs}`);
                this.log(`Renamed File: ${renamedFile}`);
                this.emit("all", "rename", abs, renamedFile);
                this.emit("rename", abs, renamedFile);
                this.removeWatcher(abs);
            }
            else {
                this.emit("all", "delete", abs);
                this.emit("delete", abs);
            }
            return;
        }
        if (!this.files.includes(abs)) {
            // Create
            this.watchers.push(this.createFileWatcher(abs));
            this.emit("all", "add", abs);
            this.emit("add", abs);
        }
    }
    removeWatcher(file) {
        const watcherStruct = this.getWatcher(file);
        if (typeof watcherStruct !== "undefined") {
            watcherStruct.watcher.close();
            this.watchers.splice(this.watchers.indexOf(watcherStruct), 1);
        }
    }
    getRenamedFiles(dir) {
        const files = this.getFiles(dir);
        this.log(colours_ts_1.Colours("Files on Disk:", "yellow") + os_1.EOL + JSON.stringify(files, null, 2));
        this.log(colours_ts_1.Colours("Watched Files:", "yellow") + os_1.EOL + JSON.stringify(this.files, null, 2));
        for (const f of files) {
            if (!this.files.includes(f)) {
                return f;
            }
        }
        return undefined;
    }
    createFileWatcher(file) {
        return {
            target: file,
            watcher: fs.watch(file, this.options, (e, _) => { this.onFileEvent(e, file); })
        };
    }
    createDirWatcher(dir) {
        return {
            target: dir,
            watcher: fs.watch(dir, this.options, (e, f) => { this.onDirectoryEvent(e, f, dir); })
        };
    }
    getWatcher(filename) {
        return this.watchers.find((w) => path.normalize(w.target) === path.normalize(filename));
    }
    lock() {
        this.locked = true;
        setTimeout(() => { this.locked = false; }, this.options.lockDuration);
    }
    /**
     * Attachs watch listeners and starts watching specified files
     * Available events are
     * `add` - Emitted when a file is created
     * `delete` - Emitted when a file is deleted
     * `change` - Emitted when a file change is detected
     * `rename` - Emitted when a file is renamed
     * `all` - Emitted for all the above events
     */
    Start() {
        this.log("Watching Files:" + os_1.EOL + this.files.map((f) => `${colours_ts_1.Colours(f, "green")}`).join(os_1.EOL));
        for (const file of this.files) {
            this.watchers.push(this.createFileWatcher(file));
        }
        this.log("Watching Directories:" + os_1.EOL + this.directories.map((f) => `${colours_ts_1.Colours(f, "green")}`).join(os_1.EOL));
        for (const dir of this.directories) {
            this.watchers.push(this.createDirWatcher(dir));
        }
        return this;
    }
}
exports.Bewatch = Bewatch;
//# sourceMappingURL=data:application/json;base64,